{"ast":null,"code":"var SetCache = require('./_SetCache'),\n  arrayIncludes = require('./_arrayIncludes'),\n  arrayIncludesWith = require('./_arrayIncludesWith'),\n  arrayMap = require('./_arrayMap'),\n  baseUnary = require('./_baseUnary'),\n  cacheHas = require('./_cacheHas');\n\n/** Used as the size to enable large array optimizations. */\nvar LARGE_ARRAY_SIZE = 200;\n\n/**\r\n * The base implementation of methods like `_.difference` without support\r\n * for excluding multiple arrays or iteratee shorthands.\r\n *\r\n * @private\r\n * @param {Array} array The array to inspect.\r\n * @param {Array} values The values to exclude.\r\n * @param {Function} [iteratee] The iteratee invoked per element.\r\n * @param {Function} [comparator] The comparator invoked per element.\r\n * @returns {Array} Returns the new array of filtered values.\r\n */\nfunction baseDifference(array, values, iteratee, comparator) {\n  var index = -1,\n    includes = arrayIncludes,\n    isCommon = true,\n    length = array.length,\n    result = [],\n    valuesLength = values.length;\n  if (!length) {\n    return result;\n  }\n  if (iteratee) {\n    values = arrayMap(values, baseUnary(iteratee));\n  }\n  if (comparator) {\n    includes = arrayIncludesWith;\n    isCommon = false;\n  } else if (values.length >= LARGE_ARRAY_SIZE) {\n    includes = cacheHas;\n    isCommon = false;\n    values = new SetCache(values);\n  }\n  outer: while (++index < length) {\n    var value = array[index],\n      computed = iteratee == null ? value : iteratee(value);\n    value = comparator || value !== 0 ? value : 0;\n    if (isCommon && computed === computed) {\n      var valuesIndex = valuesLength;\n      while (valuesIndex--) {\n        if (values[valuesIndex] === computed) {\n          continue outer;\n        }\n      }\n      result.push(value);\n    } else if (!includes(values, computed, comparator)) {\n      result.push(value);\n    }\n  }\n  return result;\n}\nmodule.exports = baseDifference;","map":{"version":3,"names":["SetCache","require","arrayIncludes","arrayIncludesWith","arrayMap","baseUnary","cacheHas","LARGE_ARRAY_SIZE","baseDifference","array","values","iteratee","comparator","index","includes","isCommon","length","result","valuesLength","outer","value","computed","valuesIndex","push","module","exports"],"sources":["C:/Users/Admin/Desktop/REACTADMINCELLPHONES/ReactAdminCellphones/node_modules/lodash/_baseDifference.js"],"sourcesContent":["var SetCache = require('./_SetCache'),\r\n    arrayIncludes = require('./_arrayIncludes'),\r\n    arrayIncludesWith = require('./_arrayIncludesWith'),\r\n    arrayMap = require('./_arrayMap'),\r\n    baseUnary = require('./_baseUnary'),\r\n    cacheHas = require('./_cacheHas');\r\n\r\n/** Used as the size to enable large array optimizations. */\r\nvar LARGE_ARRAY_SIZE = 200;\r\n\r\n/**\r\n * The base implementation of methods like `_.difference` without support\r\n * for excluding multiple arrays or iteratee shorthands.\r\n *\r\n * @private\r\n * @param {Array} array The array to inspect.\r\n * @param {Array} values The values to exclude.\r\n * @param {Function} [iteratee] The iteratee invoked per element.\r\n * @param {Function} [comparator] The comparator invoked per element.\r\n * @returns {Array} Returns the new array of filtered values.\r\n */\r\nfunction baseDifference(array, values, iteratee, comparator) {\r\n  var index = -1,\r\n      includes = arrayIncludes,\r\n      isCommon = true,\r\n      length = array.length,\r\n      result = [],\r\n      valuesLength = values.length;\r\n\r\n  if (!length) {\r\n    return result;\r\n  }\r\n  if (iteratee) {\r\n    values = arrayMap(values, baseUnary(iteratee));\r\n  }\r\n  if (comparator) {\r\n    includes = arrayIncludesWith;\r\n    isCommon = false;\r\n  }\r\n  else if (values.length >= LARGE_ARRAY_SIZE) {\r\n    includes = cacheHas;\r\n    isCommon = false;\r\n    values = new SetCache(values);\r\n  }\r\n  outer:\r\n  while (++index < length) {\r\n    var value = array[index],\r\n        computed = iteratee == null ? value : iteratee(value);\r\n\r\n    value = (comparator || value !== 0) ? value : 0;\r\n    if (isCommon && computed === computed) {\r\n      var valuesIndex = valuesLength;\r\n      while (valuesIndex--) {\r\n        if (values[valuesIndex] === computed) {\r\n          continue outer;\r\n        }\r\n      }\r\n      result.push(value);\r\n    }\r\n    else if (!includes(values, computed, comparator)) {\r\n      result.push(value);\r\n    }\r\n  }\r\n  return result;\r\n}\r\n\r\nmodule.exports = baseDifference;\r\n"],"mappings":"AAAA,IAAIA,QAAQ,GAAGC,OAAO,CAAC,aAAa,CAAC;EACjCC,aAAa,GAAGD,OAAO,CAAC,kBAAkB,CAAC;EAC3CE,iBAAiB,GAAGF,OAAO,CAAC,sBAAsB,CAAC;EACnDG,QAAQ,GAAGH,OAAO,CAAC,aAAa,CAAC;EACjCI,SAAS,GAAGJ,OAAO,CAAC,cAAc,CAAC;EACnCK,QAAQ,GAAGL,OAAO,CAAC,aAAa,CAAC;;AAErC;AACA,IAAIM,gBAAgB,GAAG,GAAG;;AAE1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,cAAcA,CAACC,KAAK,EAAEC,MAAM,EAAEC,QAAQ,EAAEC,UAAU,EAAE;EAC3D,IAAIC,KAAK,GAAG,CAAC,CAAC;IACVC,QAAQ,GAAGZ,aAAa;IACxBa,QAAQ,GAAG,IAAI;IACfC,MAAM,GAAGP,KAAK,CAACO,MAAM;IACrBC,MAAM,GAAG,EAAE;IACXC,YAAY,GAAGR,MAAM,CAACM,MAAM;EAEhC,IAAI,CAACA,MAAM,EAAE;IACX,OAAOC,MAAM;EACf;EACA,IAAIN,QAAQ,EAAE;IACZD,MAAM,GAAGN,QAAQ,CAACM,MAAM,EAAEL,SAAS,CAACM,QAAQ,CAAC,CAAC;EAChD;EACA,IAAIC,UAAU,EAAE;IACdE,QAAQ,GAAGX,iBAAiB;IAC5BY,QAAQ,GAAG,KAAK;EAClB,CAAC,MACI,IAAIL,MAAM,CAACM,MAAM,IAAIT,gBAAgB,EAAE;IAC1CO,QAAQ,GAAGR,QAAQ;IACnBS,QAAQ,GAAG,KAAK;IAChBL,MAAM,GAAG,IAAIV,QAAQ,CAACU,MAAM,CAAC;EAC/B;EACAS,KAAK,EACL,OAAO,EAAEN,KAAK,GAAGG,MAAM,EAAE;IACvB,IAAII,KAAK,GAAGX,KAAK,CAACI,KAAK,CAAC;MACpBQ,QAAQ,GAAGV,QAAQ,IAAI,IAAI,GAAGS,KAAK,GAAGT,QAAQ,CAACS,KAAK,CAAC;IAEzDA,KAAK,GAAIR,UAAU,IAAIQ,KAAK,KAAK,CAAC,GAAIA,KAAK,GAAG,CAAC;IAC/C,IAAIL,QAAQ,IAAIM,QAAQ,KAAKA,QAAQ,EAAE;MACrC,IAAIC,WAAW,GAAGJ,YAAY;MAC9B,OAAOI,WAAW,EAAE,EAAE;QACpB,IAAIZ,MAAM,CAACY,WAAW,CAAC,KAAKD,QAAQ,EAAE;UACpC,SAASF,KAAK;QAChB;MACF;MACAF,MAAM,CAACM,IAAI,CAACH,KAAK,CAAC;IACpB,CAAC,MACI,IAAI,CAACN,QAAQ,CAACJ,MAAM,EAAEW,QAAQ,EAAET,UAAU,CAAC,EAAE;MAChDK,MAAM,CAACM,IAAI,CAACH,KAAK,CAAC;IACpB;EACF;EACA,OAAOH,MAAM;AACf;AAEAO,MAAM,CAACC,OAAO,GAAGjB,cAAc"},"metadata":{},"sourceType":"script"}