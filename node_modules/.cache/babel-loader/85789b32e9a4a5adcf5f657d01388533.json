{"ast":null,"code":"var Symbol = require('./_Symbol'),\n  arrayMap = require('./_arrayMap'),\n  isArray = require('./isArray'),\n  isSymbol = require('./isSymbol');\n\n/** Used as references for various `Number` constants. */\nvar INFINITY = 1 / 0;\n\n/** Used to convert symbols to primitives and strings. */\nvar symbolProto = Symbol ? Symbol.prototype : undefined,\n  symbolToString = symbolProto ? symbolProto.toString : undefined;\n\n/**\r\n * The base implementation of `_.toString` which doesn't convert nullish\r\n * values to empty strings.\r\n *\r\n * @private\r\n * @param {*} value The value to process.\r\n * @returns {string} Returns the string.\r\n */\nfunction baseToString(value) {\n  // Exit early for strings to avoid a performance hit in some environments.\n  if (typeof value == 'string') {\n    return value;\n  }\n  if (isArray(value)) {\n    // Recursively convert values (susceptible to call stack limits).\n    return arrayMap(value, baseToString) + '';\n  }\n  if (isSymbol(value)) {\n    return symbolToString ? symbolToString.call(value) : '';\n  }\n  var result = value + '';\n  return result == '0' && 1 / value == -INFINITY ? '-0' : result;\n}\nmodule.exports = baseToString;","map":{"version":3,"names":["Symbol","require","arrayMap","isArray","isSymbol","INFINITY","symbolProto","prototype","undefined","symbolToString","toString","baseToString","value","call","result","module","exports"],"sources":["C:/Users/Admin/Desktop/REACTADMINCELLPHONES/ReactAdminCellphones/node_modules/lodash/_baseToString.js"],"sourcesContent":["var Symbol = require('./_Symbol'),\r\n    arrayMap = require('./_arrayMap'),\r\n    isArray = require('./isArray'),\r\n    isSymbol = require('./isSymbol');\r\n\r\n/** Used as references for various `Number` constants. */\r\nvar INFINITY = 1 / 0;\r\n\r\n/** Used to convert symbols to primitives and strings. */\r\nvar symbolProto = Symbol ? Symbol.prototype : undefined,\r\n    symbolToString = symbolProto ? symbolProto.toString : undefined;\r\n\r\n/**\r\n * The base implementation of `_.toString` which doesn't convert nullish\r\n * values to empty strings.\r\n *\r\n * @private\r\n * @param {*} value The value to process.\r\n * @returns {string} Returns the string.\r\n */\r\nfunction baseToString(value) {\r\n  // Exit early for strings to avoid a performance hit in some environments.\r\n  if (typeof value == 'string') {\r\n    return value;\r\n  }\r\n  if (isArray(value)) {\r\n    // Recursively convert values (susceptible to call stack limits).\r\n    return arrayMap(value, baseToString) + '';\r\n  }\r\n  if (isSymbol(value)) {\r\n    return symbolToString ? symbolToString.call(value) : '';\r\n  }\r\n  var result = (value + '');\r\n  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;\r\n}\r\n\r\nmodule.exports = baseToString;\r\n"],"mappings":"AAAA,IAAIA,MAAM,GAAGC,OAAO,CAAC,WAAW,CAAC;EAC7BC,QAAQ,GAAGD,OAAO,CAAC,aAAa,CAAC;EACjCE,OAAO,GAAGF,OAAO,CAAC,WAAW,CAAC;EAC9BG,QAAQ,GAAGH,OAAO,CAAC,YAAY,CAAC;;AAEpC;AACA,IAAII,QAAQ,GAAG,CAAC,GAAG,CAAC;;AAEpB;AACA,IAAIC,WAAW,GAAGN,MAAM,GAAGA,MAAM,CAACO,SAAS,GAAGC,SAAS;EACnDC,cAAc,GAAGH,WAAW,GAAGA,WAAW,CAACI,QAAQ,GAAGF,SAAS;;AAEnE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASG,YAAYA,CAACC,KAAK,EAAE;EAC3B;EACA,IAAI,OAAOA,KAAK,IAAI,QAAQ,EAAE;IAC5B,OAAOA,KAAK;EACd;EACA,IAAIT,OAAO,CAACS,KAAK,CAAC,EAAE;IAClB;IACA,OAAOV,QAAQ,CAACU,KAAK,EAAED,YAAY,CAAC,GAAG,EAAE;EAC3C;EACA,IAAIP,QAAQ,CAACQ,KAAK,CAAC,EAAE;IACnB,OAAOH,cAAc,GAAGA,cAAc,CAACI,IAAI,CAACD,KAAK,CAAC,GAAG,EAAE;EACzD;EACA,IAAIE,MAAM,GAAIF,KAAK,GAAG,EAAG;EACzB,OAAQE,MAAM,IAAI,GAAG,IAAK,CAAC,GAAGF,KAAK,IAAK,CAACP,QAAQ,GAAI,IAAI,GAAGS,MAAM;AACpE;AAEAC,MAAM,CAACC,OAAO,GAAGL,YAAY"},"metadata":{},"sourceType":"script"}