{"ast":null,"code":"var arrayPush = require('./_arrayPush'),\n  isFlattenable = require('./_isFlattenable');\n\n/**\r\n * The base implementation of `_.flatten` with support for restricting flattening.\r\n *\r\n * @private\r\n * @param {Array} array The array to flatten.\r\n * @param {number} depth The maximum recursion depth.\r\n * @param {boolean} [predicate=isFlattenable] The function invoked per iteration.\r\n * @param {boolean} [isStrict] Restrict to values that pass `predicate` checks.\r\n * @param {Array} [result=[]] The initial result value.\r\n * @returns {Array} Returns the new flattened array.\r\n */\nfunction baseFlatten(array, depth, predicate, isStrict, result) {\n  var index = -1,\n    length = array.length;\n  predicate || (predicate = isFlattenable);\n  result || (result = []);\n  while (++index < length) {\n    var value = array[index];\n    if (depth > 0 && predicate(value)) {\n      if (depth > 1) {\n        // Recursively flatten arrays (susceptible to call stack limits).\n        baseFlatten(value, depth - 1, predicate, isStrict, result);\n      } else {\n        arrayPush(result, value);\n      }\n    } else if (!isStrict) {\n      result[result.length] = value;\n    }\n  }\n  return result;\n}\nmodule.exports = baseFlatten;","map":{"version":3,"names":["arrayPush","require","isFlattenable","baseFlatten","array","depth","predicate","isStrict","result","index","length","value","module","exports"],"sources":["C:/Users/HP/Desktop/SELLPHONE/FE/ReactAdminCellphones/node_modules/lodash/_baseFlatten.js"],"sourcesContent":["var arrayPush = require('./_arrayPush'),\r\n    isFlattenable = require('./_isFlattenable');\r\n\r\n/**\r\n * The base implementation of `_.flatten` with support for restricting flattening.\r\n *\r\n * @private\r\n * @param {Array} array The array to flatten.\r\n * @param {number} depth The maximum recursion depth.\r\n * @param {boolean} [predicate=isFlattenable] The function invoked per iteration.\r\n * @param {boolean} [isStrict] Restrict to values that pass `predicate` checks.\r\n * @param {Array} [result=[]] The initial result value.\r\n * @returns {Array} Returns the new flattened array.\r\n */\r\nfunction baseFlatten(array, depth, predicate, isStrict, result) {\r\n  var index = -1,\r\n      length = array.length;\r\n\r\n  predicate || (predicate = isFlattenable);\r\n  result || (result = []);\r\n\r\n  while (++index < length) {\r\n    var value = array[index];\r\n    if (depth > 0 && predicate(value)) {\r\n      if (depth > 1) {\r\n        // Recursively flatten arrays (susceptible to call stack limits).\r\n        baseFlatten(value, depth - 1, predicate, isStrict, result);\r\n      } else {\r\n        arrayPush(result, value);\r\n      }\r\n    } else if (!isStrict) {\r\n      result[result.length] = value;\r\n    }\r\n  }\r\n  return result;\r\n}\r\n\r\nmodule.exports = baseFlatten;\r\n"],"mappings":"AAAA,IAAIA,SAAS,GAAGC,OAAO,CAAC,cAAc,CAAC;EACnCC,aAAa,GAAGD,OAAO,CAAC,kBAAkB,CAAC;;AAE/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASE,WAAWA,CAACC,KAAK,EAAEC,KAAK,EAAEC,SAAS,EAAEC,QAAQ,EAAEC,MAAM,EAAE;EAC9D,IAAIC,KAAK,GAAG,CAAC,CAAC;IACVC,MAAM,GAAGN,KAAK,CAACM,MAAM;EAEzBJ,SAAS,KAAKA,SAAS,GAAGJ,aAAa,CAAC;EACxCM,MAAM,KAAKA,MAAM,GAAG,EAAE,CAAC;EAEvB,OAAO,EAAEC,KAAK,GAAGC,MAAM,EAAE;IACvB,IAAIC,KAAK,GAAGP,KAAK,CAACK,KAAK,CAAC;IACxB,IAAIJ,KAAK,GAAG,CAAC,IAAIC,SAAS,CAACK,KAAK,CAAC,EAAE;MACjC,IAAIN,KAAK,GAAG,CAAC,EAAE;QACb;QACAF,WAAW,CAACQ,KAAK,EAAEN,KAAK,GAAG,CAAC,EAAEC,SAAS,EAAEC,QAAQ,EAAEC,MAAM,CAAC;MAC5D,CAAC,MAAM;QACLR,SAAS,CAACQ,MAAM,EAAEG,KAAK,CAAC;MAC1B;IACF,CAAC,MAAM,IAAI,CAACJ,QAAQ,EAAE;MACpBC,MAAM,CAACA,MAAM,CAACE,MAAM,CAAC,GAAGC,KAAK;IAC/B;EACF;EACA,OAAOH,MAAM;AACf;AAEAI,MAAM,CAACC,OAAO,GAAGV,WAAW"},"metadata":{},"sourceType":"script"}